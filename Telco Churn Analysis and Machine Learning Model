import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
pd.set_option('display.max_columns', 500)

df= pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')

df.info()

df['TotalCharges'] = pd.to_numeric(df['TotalCharges'],errors='coerce')
df['TotalCharges'].fillna(value=df['TotalCharges'].mean(), inplace=True)

plt.rcParams['figure.figsize'] = (12, 5)
plt.hist(df.tenure)
plt.title('Tenure ',loc='center',pad=30, fontsize=15, color='blue')
plt.xlabel('Tenure', fontsize = 15)
plt.ylabel('Number of Consumers',fontsize = 15)
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.hist(df.MonthlyCharges)
plt.title('Monthly Charges Distribution ',loc='center',pad=30, fontsize=15, color='blue')
plt.xlabel('Charges', fontsize = 15)
plt.ylabel('Number of Consumers',fontsize = 15)
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.hist(df.TotalCharges)
plt.title('Total Charges Distribution ',loc='center',pad=30, fontsize=15, color='blue')
plt.xlabel('Charges', fontsize = 15)
plt.ylabel('Number of Consumers',fontsize = 15)
plt.show()

fig = plt.figure()
labels = ['Male','Female']
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
plt.title('Gender',pad=30, fontsize=15, color='green')
gender= df.gender.value_counts()
ax.pie(gender, labels=labels, autopct='%.0f%%')
plt.show()

fig = plt.figure()
labels = ['No','Yes']
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
plt.title('Partner',loc='center',pad=30, fontsize=15, color='green')
gender= df.Partner.value_counts()
ax.pie(gender, labels=labels, autopct='%.0f%%')
plt.show()

fig = plt.figure()
labels = ['No','Yes']
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
plt.title('Dependents',loc='center',pad=30, fontsize=15, color='green')
gender= df.Dependents.value_counts()
ax.pie(gender, labels=labels, autopct='%.0f%%')
plt.show()

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
labels = ['No','Yes']
plt.title('Customer Churn',loc='center',pad=30, fontsize=15, color='green')
churn = df.Churn.value_counts()
ax.pie(churn, labels=labels, autopct='%.0f%%')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.clf()
plt.title('Multiple Lines',loc='center',pad=30, fontsize=15, color='green')
df.MultipleLines.value_counts().plot(kind='bar', color='green')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.clf()
plt.title('Internet Service',loc='center',pad=30, fontsize=15, color='green')
df.InternetService.value_counts().plot(kind='bar', color='green')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.clf()
plt.title('Phone Service',loc='center',pad=30, fontsize=15, color='green')
df.PhoneService.value_counts().plot(kind='bar', color='green')
plt.show()

df['SeniorCitizen']= df['SeniorCitizen'].replace([0,1],['No','Yes'])

plt.rcParams['figure.figsize'] = (12, 5)
plt.clf()
plt.title('Senior Citizen',loc='center',pad=30, fontsize=15, color='green')
df.SeniorCitizen.value_counts().plot(kind='bar', color='green')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.clf()
plt.title('Online Security',loc='center',pad=30, fontsize=15, color='green')
df.OnlineSecurity.value_counts().plot(kind='bar', color='green')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.clf()
plt.title('Online Backup',loc='center',pad=30, fontsize=15, color='green')
df.OnlineBackup.value_counts().plot(kind='bar', color='green')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.clf()
plt.title('Device Protection',loc='center',pad=30, fontsize=15, color='green')
df.DeviceProtection.value_counts().plot(kind='bar', color='green')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.clf()
plt.title('Tech Support',loc='center',pad=30, fontsize=15, color='green')
df.TechSupport.value_counts().plot(kind='bar', color='green')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.clf()
plt.title('Streaming TV',loc='center',pad=30, fontsize=15, color='green')
df.StreamingTV.value_counts().plot(kind='bar', color='green')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.clf()
plt.title('Streaming Movies',loc='center',pad=30, fontsize=15, color='green')
df.StreamingMovies.value_counts().plot(kind='bar', color='green')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.title('Contract',loc='center',pad=30, fontsize=15, color='green')
df.Contract.value_counts().plot(kind='bar', color='green')
plt.show()

plt.rcParams['figure.figsize'] = (12, 5)
plt.title('Paperless Billing',loc='center',pad=30, fontsize=15, color='green')
df.PaperlessBilling.value_counts().plot(kind='bar', color='green')
plt.show()

sns.set(style='darkgrid')

fig, ax = plt.subplots(3, 3, figsize=(14, 12))
sns.countplot(data=df, x='gender', hue='Churn', ax=ax[0][0])
sns.countplot(data=df, x='Partner', hue='Churn', ax=ax[0][1])
sns.countplot(data=df, x='SeniorCitizen', hue='Churn', ax=ax[0][2])
sns.countplot(data=df, x='PhoneService', hue='Churn', ax=ax[1][0])
sns.countplot(data=df, x='StreamingTV', hue='Churn', ax=ax[1][1])
sns.countplot(data=df, x='InternetService', hue='Churn', ax=ax[1][2])
sns.countplot(data=df, x='PaperlessBilling', hue='Churn', ax=ax[2][1])
plt.tight_layout()
plt.show()

cleaned_df = df.drop(['customerID'], axis=1)
cleaned_df

from sklearn.preprocessing import LabelEncoder

for column in cleaned_df.columns:
    if cleaned_df[column].dtype == np.number: continue
   
    cleaned_df[column] = LabelEncoder().fit_transform(cleaned_df[column])
print(cleaned_df.describe())

from sklearn.model_selection import train_test_split

x = cleaned_df.drop('Churn', axis = 1) 
y = cleaned_df['Churn']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

from sklearn.linear_model import LogisticRegression
lg = LogisticRegression().fit(x_train, y_train)

from sklearn.metrics import classification_report

y_train_pred = lg.predict(x_train)
 
print('Classification Report Training Model (Logistic Regression) :')
print(classification_report(y_train, y_train_pred))

from sklearn.metrics import classification_report

y_test_pred = lg.predict(x_test)

print('Classification Report Testing Model (Logistic Regression):')
print(classification_report(y_test, y_test_pred))

from sklearn.metrics import confusion_matrix
confusion_matrix_df = pd.DataFrame((confusion_matrix(y_test, y_test_pred)), ('No churn', 'Churn'), ('No churn', 'Churn'))

from sklearn.metrics import confusion_matrix
confusion_matrix(y_test, y_test_pred)


plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='BuPu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Testing Model\n(Logistic Regression)\n', fontsize=18, color='darkblue')
plt.ylabel('True label', fontsize=14)
plt.xlabel('Predicted label', fontsize=14)
plt.show()

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier().fit(x_train, y_train)

from sklearn.metrics import classification_report
y_train_pred = rfc.predict(x_train)

print(classification_report(y_train, y_train_pred))

y_test_pred = rfc.predict(x_test)

print(classification_report(y_test, y_test_pred))

confusion_matrix_df = pd.DataFrame((confusion_matrix(y_test, y_test_pred)), ('No churn', 'Churn'), ('No churn', 'Churn'))

# Plot confusion matrix
plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='BuPu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Testing Model\n(Random Forest)\n', fontsize=18, color='darkblue')
plt.ylabel('True label', fontsize=14)
plt.xlabel('Predicted label', fontsize=14)
plt.show()

from sklearn.ensemble import GradientBoostingClassifier
#Train the model
gbc = GradientBoostingClassifier().fit(x_train, y_train)

y_train_pred = gbc.predict(x_train)

print(classification_report(y_train, y_train_pred))

y_test_pred = gbc.predict(x_test)

print(classification_report(y_test, y_test_pred))

confusion_matrix_df = pd.DataFrame((confusion_matrix(y_test, y_test_pred)), ('No churn', 'Churn'), ('No churn', 'Churn'))


plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size': 14}, fmt='d', cmap='BuPu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Testing Model\n(Gradient Boosting)', fontsize=18, color='darkblue')
plt.ylabel('True label', fontsize=14)
plt.xlabel('Predicted label', fontsize=14)
plt.show()
